Исключение – это нежелательная ситуация, которая возникает во время выполнения программы (к примеру методов) и нарушает нормальный ход ее работы.
В программе исключения могут возникать в результате неправильных действий пользователя, отсутствии необходимого ресурса на диске, или потери соединения с сервером по сети.

Причинами исключений при выполнении программы также могут быть ошибки программирования или неправильное использование API.
В отличие от нашего мира, программа должна четко знать, как поступать в такой ситуации. Для этого в Java предусмотрен механизм исключений.

Кратко о ключевых словах try, catch, finally, throws:
Обработка исключений в Java основана на использовании в программе следующих ключевых слов:
1)try – блок кода, в котором может произойти исключение;
2)catch – блок кода, который выполниться если поймает исключение (исключение сработает);
3)finally – блок кода, который является необязательным, но при его наличии будет выполняться в любом случае независимо от результатов выполнения блока try (даже если catch).
4)throw - В некоторых случаях требуется выбросить исключение самостоятельно. Это делается при помощи ключевого слова throw.
5)Ключевое слово throws используется, чтобы в сигнатуре метода указать, что он выбрасывает исключение.
  Его можно использовать, чтобы передавать исключения по стеку вызовов и указать, что эти исключения не обязательно должны обрабатываться в методе, в котором они объявлены.

1-2) Пример try, catch:
class ExceptionTest{
    // Метод принимает два целых числа
    // и возвращает результат деления
    // первого на второе
    static float divide(int x, int y){
        float result = x / y;
        return result;
    }
    public static void main(String args[]){
        int x = 4;
        int y = 2;
        try {
            // Эта строка будет выполнена
            System.out.println(divide(x, y));
            x = 0;
            // Эта тоже
            System.out.println(divide(x, y));
            x = 4;
            y = 0;
            // Эта выбросит исключение
            System.out.println(divide(x, y));
        } catch (ArithmeticException e) {
            System.out.println("Ошибка при делении " + x + " на " + y);
        }
    }
}


3) Пример Finally:
// Если печка работает и еда сгорела,нужно выключить печку. Если еда не сгорела и приготовилась нормально, то нужно все равно выключить печку.
try {
 turnOvenOn();
 x.bake
} catch(BakingException) {
 ex.printStackTrace
} finally {
 turnOvenOn;
}


4) Пример Throw:
public class ThrowTest
{
  public static void main(String[] args) {
        LinkedList<String> fruits = new LinkedList<String>();
        fruits.add("apple");
        fruits.add("banana");
        fruits.add("orange");
        fruits.add("mango");
        // Печатает список
        ThrowTest.PrintMe(fruits);
        // Выбрасывает исключение
        ThrowTest.PrintMe(null);
  }
    public static void PrintMe(LinkedList<String> fruits){
        if (fruits == null){
            throw new NullPointerException("Аргумент не инициализирован");
        }
        System.out.println(fruits);
    }
}


5) Пример Throws:
public void takeRisk() throws BadException {   // Этот метод должен сообщить всем что он выбрасывает BadException
 if (abandonAllHope) {
  throw new BadException();   // Создаем объект BadException и выбрасываем его
}
}


Исключение который являются потомками класса RunTimeException не проверяются.
Непроверяемые исключения не требуют явной обработки в коде. Компилятор не требует, чтобы такие исключения обрабатывались или объявлялись в сигнатуре метода.
Они обычно указывают на ошибки программирования, такие как неправильное использование API или логические ошибки (Проще говоря это исключение которые появляются из-за неправильного кода или ошибки в нем).
Примеры: NullPointerException, ArrayIndexOutOfBoundsException, IllegalArgumentException.

Исключение которые являются потомками класса Exception проверяются.
Проверяемые исключения требуют явной обработки в коде. Компилятор проверяет, чтобы все такие исключения были либо обработаны с помощью блоков try-catch, либо объявлены в сигнатуре метода с ключевым словом throws.
Примеры: IOException, SQLException, FileNotFoundException.